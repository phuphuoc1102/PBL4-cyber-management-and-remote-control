/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gui.staff;

import com.bus.common.CommonBus;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.SwingUtilities;
import java.util.List;
import java.util.logging.Level;
import com.entity.Computer;
import com.untity.ShareSocketHolder;
import java.io.EOFException;
import java.net.BindException;
import java.util.logging.Logger;

/**
 *
 * @author Admin
 */
public class Request extends javax.swing.JFrame {

    private ServerSocket server;
    public Socket soc = null;
    private Computer computer;
    private String request;
    private String urlBlock;

    /**
     * Creates new form shutdown
     */
    public Request(Computer computer, ServerSocket server, Socket soc, String request, String urlBlock) {
        DataOutputStream dos = null;
        this.computer = computer;
        this.server = server;
        this.request = request;
        this.soc = soc;
        this.urlBlock = urlBlock;
        initComponents();
    }

    public Request(Computer computer, ServerSocket server, Socket soc, String request) {
        DataOutputStream dos = null;
        this.computer = computer;
        this.server = server;
        this.request = request;
        this.soc = soc;
        initComponents();
    }

    public void setRequest(String s) {
        this.request = s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        if (this.request.equalsIgnoreCase("shutdown")) {
            jLabel2.setText("Xác nhận tắt máy này!");
        } else if (this.request.equalsIgnoreCase("restart")) {
            jLabel2.setText("Xác nhận khởi động lại máy này!");
        } else if (this.request.equalsIgnoreCase("view_chrome_history")) {
            jLabel2.setText("Xem lịch sử Chrome");
        } else if (this.request.equalsIgnoreCase("block_access")) {
            jLabel2.setText("Đồng ý chặn truy cập");
        }
        jButton1.setText("Đồng ý");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Thoát");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addGap(68, 68, 68)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(58, 58, 58))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jLabel2)
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2))
                                .addContainerGap(84, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        Thread t = new Thread(new RequestProcessing(computer, soc));
        t.start();
        this.dispose();
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }

    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;

    // End of variables declaration                   
    class RequestProcessing extends Thread {

        DataOutputStream dos;
        DataInputStream dis;
        Socket socket;
        com.entity.Computer computer;

        public RequestProcessing(com.entity.Computer c, Socket socket) {
            this.computer = c;
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                dos = new DataOutputStream(socket.getOutputStream());
                dis = new DataInputStream(socket.getInputStream());
                if (computer.getInetAddress() != null) {
                    int index = computer.getInetAddress().toString().indexOf('/');
                    String ip = computer.getInetAddress().toString();
                    String result = "";
                    if (index != -1) {
                        result = ip.substring(index + 1);
                    }
                    if (request.equalsIgnoreCase("shutdown")) {
                        dos.writeUTF("shutdown-/" + result);
                        System.out.println("sent shutdown request");
                    } else if (request.equalsIgnoreCase("restart")) {
                        dos.writeUTF("restart-/" + result);
                        System.out.println("sent restart request");
                    }
                    request = "";
                }
            } catch (IOException ex) {
                Logger.getLogger(Request.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

}
